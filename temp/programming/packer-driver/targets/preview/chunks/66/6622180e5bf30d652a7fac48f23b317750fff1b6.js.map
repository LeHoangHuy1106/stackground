{"version":3,"sources":["file:///D:/PROJECT/stackground/assets/Scripts/Extention/NodeCustom.ts"],"names":["_decorator","Component","RigidBody2D","UITransform","Vec2","Size","view","Rect","BoxCollider2D","Extention","ccclass","property","NodeCustom","uiTransform","rb","col","width","height","direction","speed","isMoving","camera","onEnable","RandomFloatInRange","onLoad","screenSize","getVisibleSize","getComponent","GetNode","node","GetSize","contentSize","clone","increaseSize","size","SetSize","sizeX","setContentSize","y","newColliderSize","Active","isBool","active","SetPositon","pos","position","GetPositon","GetRb","SetIsMoving","linearVelocity","SetGravity","n","gravityScale","HorizontalScrolling","deltaTime","newPositionX","x","update","angle"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,W,OAAAA,W;AAAyBC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAA0BC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,I,OAAAA,I;AAAMC,MAAAA,a,OAAAA,a;;AAC/GC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;4BAGjBY,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb,SACgCX,SADhC,CAC0C;AAAA;AAAA;AAAA,eAE9BY,WAF8B;AAAA,eAG9BC,EAH8B;AAAA,eAI9BC,GAJ8B;AAAA,eAK9BC,KAL8B;AAAA,eAM9BC,MAN8B;AAAA,eAO9BC,SAP8B,GAOV,CAPU;AAAA,eAQ9BC,KAR8B,GAQd,EARc;AAAA,eAS9BC,QAT8B,GASnB,KATmB;AAAA,eAU9BC,MAV8B;AAAA;;AAYtCC,QAAAA,QAAQ,GAAO;AACX,eAAKH,KAAL,GAAa;AAAA;AAAA,sCAAUI,kBAAV,CAA6B,EAA7B,EAAgC,EAAhC,CAAb;AAEH;;AACDC,QAAAA,MAAM,GAAS;AACX,cAAMC,UAAU,GAAGnB,IAAI,CAACoB,cAAL,EAAnB;AACA,eAAKV,KAAL,GAAaS,UAAU,CAACT,KAAxB;AACA,eAAKC,MAAL,GAAcQ,UAAU,CAACR,MAAzB;AACA,eAAKJ,WAAL,GAAmB,KAAKc,YAAL,CAAkBxB,WAAlB,CAAnB;AACA,eAAKW,EAAL,GAAU,KAAKa,YAAL,CAAkBzB,WAAlB,CAAV;AACA,eAAKa,GAAL,GAAW,KAAKY,YAAL,CAAkBnB,aAAlB,CAAX;AAEH;;AACMoB,QAAAA,OAAO,GAAS;AACnB,iBAAO,KAAKC,IAAZ;AACH;;AACMC,QAAAA,OAAO,GAAS;AACnB,iBAAO,IAAI1B,IAAJ,CAAS,KAAKS,WAAL,CAAiBkB,WAAjB,CAA6BC,KAA7B,GAAqChB,KAA9C,EAAqD,KAAKH,WAAL,CAAiBkB,WAAjB,CAA6BC,KAA7B,GAAqCf,MAA1F,CAAP;AACH;;AACMgB,QAAAA,YAAY,CAACC,IAAD,EAAe;AAC9B,eAAKC,OAAL,CAAaD,IAAb;AAEH;;AACMC,QAAAA,OAAO,CAACC,KAAD,EAAsB;AAChC,eAAKvB,WAAL,CAAiBwB,cAAjB,CAAgC,IAAIhC,IAAJ,CAAS+B,KAAT,EAAgB,KAAKN,OAAL,GAAeQ,CAA/B,CAAhC;AACA,cAAMC,eAAe,GAAG,IAAIhC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe6B,KAAf,EAAsB,KAAKN,OAAL,GAAeQ,CAArC,CAAxB,CAFgC,CAIhC;;AACA,eAAKvB,GAAL,CAASmB,IAAT,GAAgBK,eAAhB;AAGH;;AACMC,QAAAA,MAAM,CAACC,MAAD,EAAkB;AAC3B,eAAKZ,IAAL,CAAUa,MAAV,GAAmBD,MAAnB;AACH;;AACME,QAAAA,UAAU,CAACC,GAAD,EAAY;AACzB,eAAKf,IAAL,CAAUgB,QAAV,GAAqBD,GAArB;AACH;;AACME,QAAAA,UAAU,GAAS;AACtB,iBAAO,KAAKjB,IAAL,CAAUgB,QAAjB;AACH;;AACME,QAAAA,KAAK,GAAgB;AACxB,iBAAO,KAAKjC,EAAZ;AACH;;AACMkC,QAAAA,WAAW,CAACP,MAAD,EAAkB;AAChC,eAAKrB,QAAL,GAAgBqB,MAAhB;;AACA,cAAI,CAACA,MAAL,EAAa;AACT,iBAAK3B,EAAL,CAAQmC,cAAR,GAAyB,IAAI7C,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAzB;AACH;AACJ;;AACM8C,QAAAA,UAAU,CAACC,CAAD,EAAY;AACzB,eAAKrC,EAAL,CAAQsC,YAAR,GAAuBD,CAAvB;AACH;;AAEOE,QAAAA,mBAAmB,CAACC,SAAD,EAA0B;AAEjD,cAAMC,YAAY,GAAG,KAAK1B,IAAL,CAAUgB,QAAV,CAAmBW,CAAnB,GAAuB,KAAKrC,KAAL,GAAa,KAAKD,SAAlB,GAA8BoC,SAA1E;;AACA,cAAIC,YAAY,GAAG,CAAE,KAAKvC,KAAP,GAAe,CAAf,GAAmB,KAAKH,WAAL,CAAiBkB,WAAjB,CAA6Bf,KAA7B,GAAqC,CAAvE,IAA4EuC,YAAY,GAAG,KAAKvC,KAAL,GAAa,CAAb,GAAiB,KAAKH,WAAL,CAAiBkB,WAAjB,CAA6Bf,KAA7B,GAAqC,CAArJ,EAAwJ;AACpJ,iBAAKE,SAAL,IAAkB,CAAC,CAAnB;AACH;;AAED,eAAKJ,EAAL,CAAQmC,cAAR,GAAyB,IAAI7C,IAAJ,CAAS,KAAKe,KAAL,GAAa,KAAKD,SAA3B,EAAsC,CAAtC,CAAzB;AACH;;AACDuC,QAAAA,MAAM,CAACH,SAAD,EAAoB;AACtB,cAAI,KAAKxC,EAAL,IAAW,KAAKM,QAApB,EAA8B;AAC1B,iBAAKiC,mBAAL,CAAyBC,SAAzB;AACH;;AACD,eAAKzB,IAAL,CAAU6B,KAAV,GAAiB,CAAjB;AACH;;AAhFqC,O","sourcesContent":["import { _decorator, Component, Node, RigidBody2D, Collider2D, UITransform, Vec2, Size, tween, Vec3, Tween, view, Rect, BoxCollider2D, v2, IPhysics2DContact, Contact2DType, find, random } from 'cc';\r\nimport { Extention } from './Extention';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('NodeCustom')\r\nexport class NodeCustom extends Component {\r\n\r\n    private uiTransform: UITransform;\r\n    private rb: RigidBody2D;\r\n    private col: BoxCollider2D;\r\n    private width: number;\r\n    private height: number;\r\n    private direction: number = 1;\r\n    private speed: number = 20;\r\n    private isMoving = false;\r\n    private camera: Node;\r\n\r\n    onEnable():void{\r\n        this.speed = Extention.RandomFloatInRange(15,30)\r\n        \r\n    }\r\n    onLoad(): void {\r\n        const screenSize = view.getVisibleSize()\r\n        this.width = screenSize.width;\r\n        this.height = screenSize.height;\r\n        this.uiTransform = this.getComponent(UITransform);\r\n        this.rb = this.getComponent(RigidBody2D);\r\n        this.col = this.getComponent(BoxCollider2D);\r\n\r\n    }\r\n    public GetNode(): Node {\r\n        return this.node;\r\n    }\r\n    public GetSize(): Vec2 {\r\n        return new Vec2(this.uiTransform.contentSize.clone().width, this.uiTransform.contentSize.clone().height);\r\n    }\r\n    public increaseSize(size: number) {\r\n        this.SetSize(size);\r\n\r\n    }\r\n    public SetSize(sizeX: number): void {\r\n        this.uiTransform.setContentSize(new Size(sizeX, this.GetSize().y))\r\n        const newColliderSize = new Rect(0, 0, sizeX, this.GetSize().y);\r\n\r\n        // Gán kích thước mới cho collider2D\r\n        this.col.size = newColliderSize;\r\n\r\n\r\n    }\r\n    public Active(isBool: boolean) {\r\n        this.node.active = isBool;\r\n    }\r\n    public SetPositon(pos: Vec3) {\r\n        this.node.position = pos;\r\n    }\r\n    public GetPositon(): Vec3 {\r\n        return this.node.position;\r\n    }\r\n    public GetRb(): RigidBody2D {\r\n        return this.rb;\r\n    }\r\n    public SetIsMoving(isBool: boolean) {\r\n        this.isMoving = isBool;\r\n        if (!isBool) {\r\n            this.rb.linearVelocity = new Vec2(0, 0);\r\n        }\r\n    }\r\n    public SetGravity(n: number) {\r\n        this.rb.gravityScale = n;\r\n    }\r\n\r\n    private HorizontalScrolling(deltaTime: number): void {\r\n        \r\n        const newPositionX = this.node.position.x + this.speed * this.direction * deltaTime;\r\n        if (newPositionX < - this.width / 2 - this.uiTransform.contentSize.width / 2 || newPositionX > this.width / 2 + this.uiTransform.contentSize.width / 2) {\r\n            this.direction *= -1;\r\n        }\r\n        \r\n        this.rb.linearVelocity = new Vec2(this.speed * this.direction, 0);\r\n    }\r\n    update(deltaTime: number) {\r\n        if (this.rb && this.isMoving) {\r\n            this.HorizontalScrolling(deltaTime)\r\n        }\r\n        this.node.angle =0;\r\n    }\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n"]}