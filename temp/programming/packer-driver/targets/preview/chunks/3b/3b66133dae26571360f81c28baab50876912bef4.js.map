{"version":3,"sources":["file:///D:/PROJECT/stackground/assets/Scripts/Extention/BehaviorTree.ts"],"names":["SelectorNode","SequenceNode","ActionNode","ConditionNode","_decorator","ccclass","property","BehaviorTree","rootNode","isActive","SetRoot","nodeState","Action","Execute","Stop","Continue","Destroy","NodeState","constructor","children","childNodes","childNode","result","Success","Running","Failure","action","condition"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BehaviorTree')\r\nexport class BehaviorTree  {\r\n    private rootNode: INode;\r\n    private isActive = false;\r\n    public SetRoot(nodeState: INode) {\r\n        this.rootNode = nodeState;\r\n    }\r\n    public Action() {\r\n        if (this.isActive)\r\n        if(this.rootNode!= null)\r\n            this.rootNode.Execute();\r\n    }\r\n    public Stop() {\r\n        this.isActive = false;\r\n    }\r\n    public Continue() {\r\n        this.isActive = false;\r\n    }\r\n    public Destroy(){\r\n        this.rootNode = null;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport enum NodeState {\r\n    Success,\r\n    Failure,\r\n    Running\r\n}\r\n\r\n\r\nexport interface INode {\r\n    Execute(): NodeState;\r\n}\r\n\r\nexport class SelectorNode implements INode {\r\n    private childNodes: INode[];\r\n\r\n    constructor(children: INode[]) {\r\n        this.childNodes = children;\r\n    }\r\n\r\n    Execute(): NodeState {\r\n        for (const childNode of this.childNodes) {\r\n            const result = childNode.Execute();\r\n            if (result === NodeState.Success) {\r\n                return NodeState.Success;\r\n            } else if (result === NodeState.Running) {\r\n                return NodeState.Running;\r\n            }\r\n        }\r\n\r\n        return NodeState.Failure;\r\n    }\r\n}\r\n\r\nexport class SequenceNode implements INode {\r\n    private childNodes: INode[];\r\n\r\n    constructor(children: INode[]) {\r\n        this.childNodes = children;\r\n    }\r\n\r\n    Execute(): NodeState {\r\n        for (const childNode of this.childNodes) {\r\n            const result = childNode.Execute();\r\n            if (result === NodeState.Failure) {\r\n                return NodeState.Failure;\r\n            } else if (result === NodeState.Running) {\r\n                return NodeState.Running;\r\n            }\r\n        }\r\n        return NodeState.Success;\r\n    }\r\n}\r\n\r\nexport class ActionNode implements INode {\r\n    private action: () => NodeState;\r\n\r\n    constructor(action: () => NodeState) {\r\n        this.action = action;\r\n    }\r\n\r\n    Execute(): NodeState {\r\n        return this.action();\r\n    }\r\n}\r\n\r\nexport class ConditionNode implements INode {\r\n    private condition: () => boolean;\r\n\r\n    constructor(condition: () => boolean) {\r\n        this.condition = condition;\r\n    }\r\n\r\n    Execute(): NodeState {\r\n        if (this.condition()) {\r\n            return NodeState.Success;\r\n        }\r\n        return NodeState.Failure;\r\n    }\r\n}\r\n"]}